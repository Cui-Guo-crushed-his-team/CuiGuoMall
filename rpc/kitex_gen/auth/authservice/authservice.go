// Code generated by Kitex v0.9.1. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	auth "github.com/Cui-Guo-crushed-his-team/CuiGuoMall/rpc/kitex_gen/auth"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ValidateToken": kitex.NewMethodInfo(
		validateTokenHandler,
		newValidateTokenArgs,
		newValidateTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func validateTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.ValidateTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).ValidateToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ValidateTokenArgs:
		success, err := handler.(auth.AuthService).ValidateToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ValidateTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newValidateTokenArgs() interface{} {
	return &ValidateTokenArgs{}
}

func newValidateTokenResult() interface{} {
	return &ValidateTokenResult{}
}

type ValidateTokenArgs struct {
	Req *auth.ValidateTokenRequest
}

func (p *ValidateTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.ValidateTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ValidateTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ValidateTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ValidateTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ValidateTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.ValidateTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ValidateTokenArgs_Req_DEFAULT *auth.ValidateTokenRequest

func (p *ValidateTokenArgs) GetReq() *auth.ValidateTokenRequest {
	if !p.IsSetReq() {
		return ValidateTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ValidateTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ValidateTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ValidateTokenResult struct {
	Success *auth.ValidateTokenResponse
}

var ValidateTokenResult_Success_DEFAULT *auth.ValidateTokenResponse

func (p *ValidateTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.ValidateTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ValidateTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ValidateTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ValidateTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ValidateTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.ValidateTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ValidateTokenResult) GetSuccess() *auth.ValidateTokenResponse {
	if !p.IsSetSuccess() {
		return ValidateTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ValidateTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.ValidateTokenResponse)
}

func (p *ValidateTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ValidateTokenResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ValidateToken(ctx context.Context, Req *auth.ValidateTokenRequest) (r *auth.ValidateTokenResponse, err error) {
	var _args ValidateTokenArgs
	_args.Req = Req
	var _result ValidateTokenResult
	if err = p.c.Call(ctx, "ValidateToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
