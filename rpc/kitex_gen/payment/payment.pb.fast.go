// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package payment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PrepayReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PrepayReq[number], err)
}

func (x *PrepayReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrepayReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OutTradeNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrepayReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Subject, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrepayResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PrepayResp[number], err)
}

func (x *PrepayResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PayUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FinishReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FinishReq[number], err)
}

func (x *FinishReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OutTradeNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FinishReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TradeNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FinishResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetByOutTradeNoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetByOutTradeNoReq[number], err)
}

func (x *GetByOutTradeNoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OutTradeNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetByOutTradeNoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetByOutTradeNoResp[number], err)
}

func (x *GetByOutTradeNoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetByOutTradeNoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OutTradeNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetByOutTradeNoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TradeNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetByOutTradeNoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = Status(v)
	return offset, nil
}

func (x *GetByOutTradeNoResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrepayReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PrepayReq) fastWriteField1(buf []byte) (offset int) {
	if x.Amount == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAmount())
	return offset
}

func (x *PrepayReq) fastWriteField2(buf []byte) (offset int) {
	if x.OutTradeNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOutTradeNo())
	return offset
}

func (x *PrepayReq) fastWriteField3(buf []byte) (offset int) {
	if x.Subject == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSubject())
	return offset
}

func (x *PrepayResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PrepayResp) fastWriteField1(buf []byte) (offset int) {
	if x.PayUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPayUrl())
	return offset
}

func (x *FinishReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *FinishReq) fastWriteField1(buf []byte) (offset int) {
	if x.OutTradeNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOutTradeNo())
	return offset
}

func (x *FinishReq) fastWriteField2(buf []byte) (offset int) {
	if x.TradeNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTradeNo())
	return offset
}

func (x *FinishResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetByOutTradeNoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetByOutTradeNoReq) fastWriteField1(buf []byte) (offset int) {
	if x.OutTradeNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOutTradeNo())
	return offset
}

func (x *GetByOutTradeNoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetByOutTradeNoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetDescription())
	return offset
}

func (x *GetByOutTradeNoResp) fastWriteField2(buf []byte) (offset int) {
	if x.OutTradeNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOutTradeNo())
	return offset
}

func (x *GetByOutTradeNoResp) fastWriteField3(buf []byte) (offset int) {
	if x.TradeNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTradeNo())
	return offset
}

func (x *GetByOutTradeNoResp) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetStatus()))
	return offset
}

func (x *GetByOutTradeNoResp) fastWriteField5(buf []byte) (offset int) {
	if x.Amount == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetAmount())
	return offset
}

func (x *PrepayReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PrepayReq) sizeField1() (n int) {
	if x.Amount == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAmount())
	return n
}

func (x *PrepayReq) sizeField2() (n int) {
	if x.OutTradeNo == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOutTradeNo())
	return n
}

func (x *PrepayReq) sizeField3() (n int) {
	if x.Subject == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSubject())
	return n
}

func (x *PrepayResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PrepayResp) sizeField1() (n int) {
	if x.PayUrl == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPayUrl())
	return n
}

func (x *FinishReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *FinishReq) sizeField1() (n int) {
	if x.OutTradeNo == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOutTradeNo())
	return n
}

func (x *FinishReq) sizeField2() (n int) {
	if x.TradeNo == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTradeNo())
	return n
}

func (x *FinishResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetByOutTradeNoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetByOutTradeNoReq) sizeField1() (n int) {
	if x.OutTradeNo == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOutTradeNo())
	return n
}

func (x *GetByOutTradeNoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetByOutTradeNoResp) sizeField1() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetDescription())
	return n
}

func (x *GetByOutTradeNoResp) sizeField2() (n int) {
	if x.OutTradeNo == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOutTradeNo())
	return n
}

func (x *GetByOutTradeNoResp) sizeField3() (n int) {
	if x.TradeNo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTradeNo())
	return n
}

func (x *GetByOutTradeNoResp) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetStatus()))
	return n
}

func (x *GetByOutTradeNoResp) sizeField5() (n int) {
	if x.Amount == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetAmount())
	return n
}

var fieldIDToName_PrepayReq = map[int32]string{
	1: "Amount",
	2: "OutTradeNo",
	3: "Subject",
}

var fieldIDToName_PrepayResp = map[int32]string{
	1: "PayUrl",
}

var fieldIDToName_FinishReq = map[int32]string{
	1: "OutTradeNo",
	2: "TradeNo",
}

var fieldIDToName_FinishResp = map[int32]string{}

var fieldIDToName_GetByOutTradeNoReq = map[int32]string{
	1: "OutTradeNo",
}

var fieldIDToName_GetByOutTradeNoResp = map[int32]string{
	1: "Description",
	2: "OutTradeNo",
	3: "TradeNo",
	4: "Status",
	5: "Amount",
}
