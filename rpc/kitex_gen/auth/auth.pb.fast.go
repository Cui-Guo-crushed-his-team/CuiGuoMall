// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package auth

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ValidateTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ValidateTokenRequest[number], err)
}

func (x *ValidateTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ValidateTokenRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserTrait, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ValidateTokenRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserRole, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ValidateTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ValidateTokenResponse[number], err)
}

func (x *ValidateTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.IsValid, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ValidateTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ValidateTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ValidateTokenResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ErrCode = ErrorCode(v)
	return offset, nil
}

func (x *ValidateTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ValidateTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ValidateTokenRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UserTrait == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserTrait())
	return offset
}

func (x *ValidateTokenRequest) fastWriteField3(buf []byte) (offset int) {
	if x.UserRole == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserRole())
	return offset
}

func (x *ValidateTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ValidateTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.IsValid {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetIsValid())
	return offset
}

func (x *ValidateTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetToken())
	return offset
}

func (x *ValidateTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetError())
	return offset
}

func (x *ValidateTokenResponse) fastWriteField4(buf []byte) (offset int) {
	if x.ErrCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetErrCode()))
	return offset
}

func (x *ValidateTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ValidateTokenRequest) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *ValidateTokenRequest) sizeField2() (n int) {
	if x.UserTrait == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserTrait())
	return n
}

func (x *ValidateTokenRequest) sizeField3() (n int) {
	if x.UserRole == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserRole())
	return n
}

func (x *ValidateTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ValidateTokenResponse) sizeField1() (n int) {
	if !x.IsValid {
		return n
	}
	n += fastpb.SizeBool(1, x.GetIsValid())
	return n
}

func (x *ValidateTokenResponse) sizeField2() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetToken())
	return n
}

func (x *ValidateTokenResponse) sizeField3() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetError())
	return n
}

func (x *ValidateTokenResponse) sizeField4() (n int) {
	if x.ErrCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetErrCode()))
	return n
}

var fieldIDToName_ValidateTokenRequest = map[int32]string{
	1: "UserId",
	2: "UserTrait",
	3: "UserRole",
}

var fieldIDToName_ValidateTokenResponse = map[int32]string{
	1: "IsValid",
	2: "Token",
	3: "Error",
	4: "ErrCode",
}
